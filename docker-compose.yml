version: "3.9"

services:
  db:
    image: postgres:13
    volumes:
      - bilolok-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"

  redis:
    image: redis:6
    env_file:
      - .env
    ports:
      - "6379:6379"

  admin:
    image: adminer
    restart: always
    ports:
      - 8081:8080
    depends_on: 
      - db
    profiles:
      - dev

  mail:
    image: maildev/maildev
    ports:
      - "1025:25"
      - "8082:80"
    profiles:
      - dev

  tusd:
    image: tusproject/tusd
    ports:
      - "8070:8070"
    volumes:
      - "${IMAGES_LOCAL_DIR}/uploads/:/data/"
    env_file:
      - .env
    command: -port 8070 -upload-dir /data/ -behind-proxy -hooks-http http://host.docker.internal:8000/api/v1/images/tus-hook -hooks-http-forward-headers authorization -hooks-enabled-events pre-create,post-finish

  thumbor:
    image: minimalcompact/thumbor
    volumes:
      - "${IMAGES_LOCAL_DIR}/:/data/uploads/"
    env_file:
      - .env
    environment:
      # VIRTUAL_HOST is picked up by nginx-proxy. Here it's set for localhost
      # but you usually need to point it to your domain, e.g. thumbor.example.com
      - VIRTUAL_HOST=localhost
      # THUMBOR_NUM_PROCESSES control how many processes run inside the container
      # Normally this is set in connection with the number of CPU cores
      # Note however that you can also use the docker-compose scale option to dynamically
      # scale your thumbor instances
      - THUMBOR_NUM_PROCESSES=4
      # this would allow CORS from any origin (you can restrict to specific origins if you want)
      - CORS_ALLOW_ORIGIN=*
      # returns a webp image if browser Accept headers match
      - AUTO_WEBP=True
      # nginx-proxy does caching automatically, so no need to store the result storage cache
      # (this greatly speeds up and saves on CPU)
      - RESULT_STORAGE=thumbor.result_storages.no_storage
      - RESULT_STORAGE_STORES_UNSAFE=True
      - STORAGE=thumbor.storages.file_storage
      ### My modifications from original recipe
      - ALLOW_UNSAFE_URL=False
      - SECURITY_KEY=${THUMBOR_SECURITY_KEY}
      - LOADER=thumbor.loaders.file_loader
      - FILE_LOADER_ROOT_PATH=/data/uploads/
    restart: always

  nginx-proxy:
    image: minimalcompact/thumbor-nginx-proxy-cache
    environment:
      # setting the DEFAULT_HOST to the same as the VIRTUAL_HOST above.
      # Makes sure it works irrespective of the host name
      # Normally this won't be necessary, but it helps for testing.
      - DEFAULT_HOST=localhost
      # optional: control cache memory size (default 500m), cache size (default 10g) and inactive (default 300m)
      #           see https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path
      - PROXY_CACHE_SIZE=10g
      - PROXY_CACHE_MEMORY_SIZE=500m
      - PROXY_CACHE_INACTIVE=300m
    volumes:
      # this is essential for nginx-proxy to detect docker containers, scaling etc
      # see https://github.com/jwilder/nginx-proxy
      - /var/run/docker.sock:/tmp/docker.sock:ro
      # mapping cache folder, to persist it independently of the container
      - bilolok-img-cache-data:/var/cache/nginx
    ports:
      - "8888:80"
      - "4443:4443"
    restart: always

  # backend:
  #   depends_on:
  #     - db
  #     - redis
  #   env_file:
  #     - .env
  #   build:
  #     context: ./backend
  #     dockerfile: backend.dockerfile
  #     args:
  #       INSTALL_DEV: ${INSTALL_DEV-false}

  # worker:
  #   depends_on:
  #     - db
  #     - redis
  #   env_file:
  #     - .env
  #   build:
  #     context: ./backend
  #     dockerfile: worker.dockerfile
  #     args:
  #       INSTALL_DEV: ${INSTALL_DEV-false}
  
volumes:
  bilolok-db-data:
  bilolok-img-cache-data: